// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name Speakol
import AVKit
import Foundation
import Kingfisher
import SafariServices
@_exported import Speakol
import Swift
import SystemConfiguration
import UIKit
import WebKit
public enum EventType {
  case impression
  case minimumPercentage
  public static func == (a: Speakol.EventType, b: Speakol.EventType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc public class SpeakolCollectionView : UIKit.UICollectionView {
  @objc public var speakolDataSource: Speakol.SpeakolCollectionViewDataSource! {
    @objc get
    @objc set(newValue)
  }
  @objc public var speakolDelegate: Speakol.SpeakolCollectionViewDelegate! {
    @objc get
    @objc set(newValue)
  }
  @objc public var speakolDelegateFlowLayout: Speakol.SpeakolCollectionViewDelegateFlowLayout?
  @objc public var numberOfItemsPerRow: Swift.Int
  @objc public var isHeaderEnabled: Swift.Bool
  @objc public var numberOfAds: Swift.Int
  @objc public var isTop: Swift.Bool
  @objc override dynamic public func awakeFromNib()
  @objc deinit
  public func viewWillDisappear()
  public func viewWillAppear()
  @objc override dynamic public init(frame: CoreGraphics.CGRect, collectionViewLayout layout: UIKit.UICollectionViewLayout)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension SpeakolCollectionView : UIKit.UICollectionViewDataSource {
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @objc dynamic public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @objc dynamic public func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
}
extension SpeakolCollectionView : UIKit.UICollectionViewDelegate {
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didEndDisplaying cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, willDisplay cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
}
@objc public protocol SpeakolCollectionViewDataSource {
  @objc func speakolCollectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc func speakolCollectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @objc optional func numberOfCollectionSections(in speakolCollectionView: UIKit.UICollectionView) -> Swift.Int
  @objc optional func speakolCollectionView(_ collectionView: UIKit.UICollectionView, viewForSupplementaryElementOfKind kind: Swift.String, at indexPath: Foundation.IndexPath) -> UIKit.UICollectionReusableView
  @objc optional func speakolCollectionView(_ collectionView: UIKit.UICollectionView, canMoveItemAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @objc optional func speakolCollectionView(_ collectionView: UIKit.UICollectionView, moveItemAt sourceIndexPath: Foundation.IndexPath, to destinationIndexPath: Foundation.IndexPath)
  @objc optional func speakolIndexTitles(for collectionView: UIKit.UICollectionView) -> [Swift.String]?
  @objc optional func speakolCollectionView(_ collectionView: UIKit.UICollectionView, indexPathForIndexTitle title: Swift.String, at index: Swift.Int) -> Foundation.IndexPath
}
@objc public protocol SpeakolCollectionViewDelegate {
  @objc optional func speakolCollectionView(_ collectionView: UIKit.UICollectionView, shouldHighlightItemAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @objc optional func speakolCollectionView(_ collectionView: UIKit.UICollectionView, didHighlightItemAt indexPath: Foundation.IndexPath)
  @objc optional func speakolCollectionView(_ collectionView: UIKit.UICollectionView, didUnhighlightItemAt indexPath: Foundation.IndexPath)
  @objc optional func speakolCollectionView(_ collectionView: UIKit.UICollectionView, shouldSelectItemAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @objc optional func speakolCollectionView(_ collectionView: UIKit.UICollectionView, shouldDeselectItemAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @objc optional func speakolCollectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @objc optional func speakolCollectionView(_ collectionView: UIKit.UICollectionView, didDeselectItemAt indexPath: Foundation.IndexPath)
  @objc optional func speakolCollectionView(_ collectionView: UIKit.UICollectionView, willDisplay cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
  @objc optional func speakolCollectionView(_ collectionView: UIKit.UICollectionView, willDisplaySupplementaryView view: UIKit.UICollectionReusableView, forElementKind elementKind: Swift.String, at indexPath: Foundation.IndexPath)
  @objc optional func speakolCollectionView(_ collectionView: UIKit.UICollectionView, didEndDisplaying cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
  @objc optional func speakolCollectionView(_ collectionView: UIKit.UICollectionView, didEndDisplayingSupplementaryView view: UIKit.UICollectionReusableView, forElementOfKind elementKind: Swift.String, at indexPath: Foundation.IndexPath)
  @objc optional func speakolCollectionView(_ collectionView: UIKit.UICollectionView, shouldShowMenuForItemAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @objc optional func speakolCollectionView(_ collectionView: UIKit.UICollectionView, canPerformAction action: ObjectiveC.Selector, forItemAt indexPath: Foundation.IndexPath, withSender sender: Any?) -> Swift.Bool
  @objc optional func speakolCollectionView(_ collectionView: UIKit.UICollectionView, performAction action: ObjectiveC.Selector, forItemAt indexPath: Foundation.IndexPath, withSender sender: Any?)
  @objc optional func speakolCollectionView(_ collectionView: UIKit.UICollectionView, transitionLayoutForOldLayout fromLayout: UIKit.UICollectionViewLayout, newLayout toLayout: UIKit.UICollectionViewLayout) -> UIKit.UICollectionViewTransitionLayout
  @objc optional func speakolCollectionView(_ collectionView: UIKit.UICollectionView, canFocusItemAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @objc optional func speakolCollectionView(_ collectionView: UIKit.UICollectionView, shouldUpdateFocusIn context: UIKit.UICollectionViewFocusUpdateContext) -> Swift.Bool
  @objc optional func speakolCollectionView(_ collectionView: UIKit.UICollectionView, didUpdateFocusIn context: UIKit.UICollectionViewFocusUpdateContext, with coordinator: UIKit.UIFocusAnimationCoordinator)
  @objc optional func indexPathForPreferredFocusedView(in collectionView: UIKit.UICollectionView) -> Foundation.IndexPath?
  @objc optional func speakolCollectionView(_ collectionView: UIKit.UICollectionView, targetIndexPathForMoveFromItemAt originalIndexPath: Foundation.IndexPath, toProposedIndexPath proposedIndexPath: Foundation.IndexPath) -> Foundation.IndexPath
  @objc optional func speakolCollectionView(_ collectionView: UIKit.UICollectionView, targetContentOffsetForProposedContentOffset proposedContentOffset: CoreGraphics.CGPoint) -> CoreGraphics.CGPoint
  @available(iOS 11.0, *)
  @objc optional func speakolCollectionView(_ collectionView: UIKit.UICollectionView, shouldSpringLoadItemAt indexPath: Foundation.IndexPath, with context: UIKit.UISpringLoadedInteractionContext) -> Swift.Bool
  @objc optional func speakolCollectionView(_ collectionView: UIKit.UICollectionView, shouldBeginMultipleSelectionInteractionAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @objc optional func speakolCollectionView(_ collectionView: UIKit.UICollectionView, didBeginMultipleSelectionInteractionAt indexPath: Foundation.IndexPath)
  @objc optional func speakolCollectionViewDidEndMultipleSelectionInteraction(_ collectionView: UIKit.UICollectionView)
}
@objc public protocol SpeakolCollectionViewDelegateFlowLayout : Speakol.SpeakolCollectionViewDelegate {
  @objc optional func speakolCollectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @objc optional func speakolCollectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, insetForSectionAt section: Swift.Int) -> UIKit.UIEdgeInsets
  @objc optional func speakolCollectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumLineSpacingForSectionAt section: Swift.Int) -> CoreGraphics.CGFloat
  @objc optional func speakolCollectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Swift.Int) -> CoreGraphics.CGFloat
  @objc optional func speakolCollectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, referenceSizeForHeaderInSection section: Swift.Int) -> CoreGraphics.CGSize
  @objc optional func speakolCollectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, referenceSizeForFooterInSection section: Swift.Int) -> CoreGraphics.CGSize
}
extension SpeakolCollectionView : UIKit.UICollectionViewDelegateFlowLayout {
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, insetForSectionAt section: Swift.Int) -> UIKit.UIEdgeInsets
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, referenceSizeForHeaderInSection section: Swift.Int) -> CoreGraphics.CGSize
}
public enum MediaType : Swift.String {
  case image
  case video
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc public class SpeakolNetworkManager : ObjectiveC.NSObject {
  public class var shared: Speakol.SpeakolNetworkManager {
    get
  }
  public func getWidgetsApi()
  public func widgetLoadedApi()
  public func widgetMinimimPercentageViewedApi()
  public func sendImpressionApi(url: Foundation.URL, parameters: [Swift.String : Any], methodType: Speakol.MethodType)
  public func sendVideoEngagementApi(url: Foundation.URL, parameters: [Swift.String : Any], methodType: Speakol.MethodType)
  public func sendVideoViewApi(url: Foundation.URL, parameters: [Swift.String : Any], methodType: Speakol.MethodType)
  public func request(parameters: [Swift.String : Any], url: Foundation.URL, methodType: Speakol.MethodType, completion: @escaping ((Swift.Bool, Any?, Swift.Error?) -> ()))
  @objc override dynamic public init()
  @objc deinit
}
public func getVideosResponse() -> [Swift.String : Any]
@objc @objcMembers public class SpeakolManager : ObjectiveC.NSObject {
  @objc public var speakolToken: Swift.String
  @objc public var widgetId: Swift.String
  @objc public class var shared: Speakol.SpeakolManager {
    @objc get
  }
  @objc public func initializeSpeakolWithToken()
  @objc public func getAttributedString(text: Swift.String, color: UIKit.UIColor, size: CoreGraphics.CGFloat, isUnderlined: Swift.Bool = false, isBold: Swift.Bool, isItalic: Swift.Bool) -> Foundation.NSAttributedString
  @objc public func setCategoryStyle(titleLabel: UIKit.UILabel, brandName: Swift.String, borderView: UIKit.UIView)
  @objc public func getSponsoredByUrl() -> Swift.String?
  @objc public func getTopVC() -> UIKit.UIViewController?
  @objc public func presentViewController(topVC: UIKit.UIViewController, videoUrl: Foundation.URL, mutedViewController: AVKit.AVPlayerViewController)
  public func sendVideoViewEvent(for videoView: Speakol.SpeakolVideoView)
  public func sendUnMutedEvent(for videoEngagement: Speakol.SpeakolVideoEngagement)
  @objc public func getSponsoredUrl() -> Swift.String
  @objc public func getImageRatio() -> CoreGraphics.CGFloat
  @objc public func getImageWidthPercentage() -> CoreGraphics.CGFloat
  @objc public func getSponsoredIconUrl() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public class NetworkManager : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc public class SpeakolView : UIKit.UIView, SafariServices.SFSafariViewControllerDelegate {
  public func browserTabHandler(url: Foundation.URL)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public class SpeakolVideoEngagement {
  @objc deinit
}
@objc public class SpeakolTableView : UIKit.UITableView {
  @objc public var speakolDataSource: Speakol.SpeakolTableViewDataSource! {
    @objc get
    @objc set(newValue)
  }
  @objc public var speakolDelegate: Speakol.SpeakolTableViewDelegate! {
    @objc get
    @objc set(newValue)
  }
  @objc public var numberOfAds: Swift.Int
  @objc public var isTop: Swift.Bool
  @objc override dynamic public func awakeFromNib()
  @objc deinit
  public func viewWillDisappear()
  public func viewWillAppear()
  @objc override dynamic public init(frame: CoreGraphics.CGRect, style: UIKit.UITableView.Style)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension SpeakolTableView : UIKit.UITableViewDataSource {
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @objc override dynamic public func reloadData()
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, titleForHeaderInSection section: Swift.Int) -> Swift.String?
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, titleForFooterInSection section: Swift.Int) -> Swift.String?
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, canEditRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, canMoveRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @objc dynamic public func sectionIndexTitles(for tableView: UIKit.UITableView) -> [Swift.String]?
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, sectionForSectionIndexTitle title: Swift.String, at index: Swift.Int) -> Swift.Int
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, commit editingStyle: UIKit.UITableViewCell.EditingStyle, forRowAt indexPath: Foundation.IndexPath)
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, moveRowAt sourceIndexPath: Foundation.IndexPath, to destinationIndexPath: Foundation.IndexPath)
}
extension SpeakolTableView : UIKit.UITableViewDelegate {
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willDisplayHeaderView view: UIKit.UIView, forSection section: Swift.Int)
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willDisplayFooterView view: UIKit.UIView, forSection section: Swift.Int)
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didEndDisplaying cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didEndDisplayingHeaderView view: UIKit.UIView, forSection section: Swift.Int)
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didEndDisplayingFooterView view: UIKit.UIView, forSection section: Swift.Int)
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
  @objc dynamic public func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreGraphics.CGFloat
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreGraphics.CGFloat
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, estimatedHeightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, estimatedHeightForHeaderInSection section: Swift.Int) -> CoreGraphics.CGFloat
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, estimatedHeightForFooterInSection section: Swift.Int) -> CoreGraphics.CGFloat
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, viewForFooterInSection section: Swift.Int) -> UIKit.UIView?
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, accessoryButtonTappedForRowWith indexPath: Foundation.IndexPath)
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, shouldHighlightRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didHighlightRowAt indexPath: Foundation.IndexPath)
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didUnhighlightRowAt indexPath: Foundation.IndexPath)
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willSelectRowAt indexPath: Foundation.IndexPath) -> Foundation.IndexPath?
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willDeselectRowAt indexPath: Foundation.IndexPath) -> Foundation.IndexPath?
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didDeselectRowAt indexPath: Foundation.IndexPath)
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, editingStyleForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell.EditingStyle
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, titleForDeleteConfirmationButtonForRowAt indexPath: Foundation.IndexPath) -> Swift.String?
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, editActionsForRowAt indexPath: Foundation.IndexPath) -> [UIKit.UITableViewRowAction]?
  @available(iOS 11.0, *)
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, leadingSwipeActionsConfigurationForRowAt indexPath: Foundation.IndexPath) -> UIKit.UISwipeActionsConfiguration?
  @available(iOS 11.0, *)
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: Foundation.IndexPath) -> UIKit.UISwipeActionsConfiguration?
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, shouldIndentWhileEditingRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willBeginEditingRowAt indexPath: Foundation.IndexPath)
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didEndEditingRowAt indexPath: Foundation.IndexPath?)
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, targetIndexPathForMoveFromRowAt sourceIndexPath: Foundation.IndexPath, toProposedIndexPath proposedDestinationIndexPath: Foundation.IndexPath) -> Foundation.IndexPath
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, indentationLevelForRowAt indexPath: Foundation.IndexPath) -> Swift.Int
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, shouldShowMenuForRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, canPerformAction action: ObjectiveC.Selector, forRowAt indexPath: Foundation.IndexPath, withSender sender: Any?) -> Swift.Bool
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, performAction action: ObjectiveC.Selector, forRowAt indexPath: Foundation.IndexPath, withSender sender: Any?)
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, canFocusRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, shouldUpdateFocusIn context: UIKit.UITableViewFocusUpdateContext) -> Swift.Bool
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didUpdateFocusIn context: UIKit.UITableViewFocusUpdateContext, with coordinator: UIKit.UIFocusAnimationCoordinator)
  @objc dynamic public func indexPathForPreferredFocusedView(in tableView: UIKit.UITableView) -> Foundation.IndexPath?
  @available(iOS 11.0, *)
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, shouldSpringLoadRowAt indexPath: Foundation.IndexPath, with context: UIKit.UISpringLoadedInteractionContext) -> Swift.Bool
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, shouldBeginMultipleSelectionInteractionAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didBeginMultipleSelectionInteractionAt indexPath: Foundation.IndexPath)
  @objc dynamic public func tableViewDidEndMultipleSelectionInteraction(_ tableView: UIKit.UITableView)
  @available(iOS 13.0, *)
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, contextMenuConfigurationForRowAt indexPath: Foundation.IndexPath, point: CoreGraphics.CGPoint) -> UIKit.UIContextMenuConfiguration?
  @available(iOS 13.0, *)
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, previewForHighlightingContextMenuWithConfiguration configuration: UIKit.UIContextMenuConfiguration) -> UIKit.UITargetedPreview?
  @available(iOS 13.0, *)
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, previewForDismissingContextMenuWithConfiguration configuration: UIKit.UIContextMenuConfiguration) -> UIKit.UITargetedPreview?
  @available(iOS 13.0, *)
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willPerformPreviewActionForMenuWith configuration: UIKit.UIContextMenuConfiguration, animator: UIKit.UIContextMenuInteractionCommitAnimating)
}
@objc public protocol SpeakolTableViewDataSource {
  @objc func speakolTableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc func speakolTableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc optional func numberOfTableSections(in speakolTableView: UIKit.UITableView) -> Swift.Int
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, titleForHeaderInSection section: Swift.Int) -> Swift.String?
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, titleForFooterInSection section: Swift.Int) -> Swift.String?
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, canEditRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, canMoveRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @objc optional func speakolSectionIndexTitles(for tableView: UIKit.UITableView) -> [Swift.String]?
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, sectionForSectionIndexTitle title: Swift.String, at index: Swift.Int) -> Swift.Int
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, commit editingStyle: UIKit.UITableViewCell.EditingStyle, forRowAt indexPath: Foundation.IndexPath)
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, moveRowAt sourceIndexPath: Foundation.IndexPath, to destinationIndexPath: Foundation.IndexPath)
}
@objc public protocol SpeakolTableViewDelegate {
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, willDisplayHeaderView view: UIKit.UIView, forSection section: Swift.Int)
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, willDisplayFooterView view: UIKit.UIView, forSection section: Swift.Int)
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, didEndDisplaying cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, didEndDisplayingHeaderView view: UIKit.UIView, forSection section: Swift.Int)
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, didEndDisplayingFooterView view: UIKit.UIView, forSection section: Swift.Int)
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreGraphics.CGFloat
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreGraphics.CGFloat
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, estimatedHeightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, estimatedHeightForHeaderInSection section: Swift.Int) -> CoreGraphics.CGFloat
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, estimatedHeightForFooterInSection section: Swift.Int) -> CoreGraphics.CGFloat
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, viewForFooterInSection section: Swift.Int) -> UIKit.UIView?
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, accessoryButtonTappedForRowWith indexPath: Foundation.IndexPath)
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, shouldHighlightRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, didHighlightRowAt indexPath: Foundation.IndexPath)
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, didUnhighlightRowAt indexPath: Foundation.IndexPath)
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, willSelectRowAt indexPath: Foundation.IndexPath) -> Foundation.IndexPath?
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, willDeselectRowAt indexPath: Foundation.IndexPath) -> Foundation.IndexPath?
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, didDeselectRowAt indexPath: Foundation.IndexPath)
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, editingStyleForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell.EditingStyle
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, titleForDeleteConfirmationButtonForRowAt indexPath: Foundation.IndexPath) -> Swift.String?
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, editActionsForRowAt indexPath: Foundation.IndexPath) -> [UIKit.UITableViewRowAction]?
  @available(iOS 11.0, *)
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, leadingSwipeActionsConfigurationForRowAt indexPath: Foundation.IndexPath) -> UIKit.UISwipeActionsConfiguration?
  @available(iOS 11.0, *)
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: Foundation.IndexPath) -> UIKit.UISwipeActionsConfiguration?
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, shouldIndentWhileEditingRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, willBeginEditingRowAt indexPath: Foundation.IndexPath)
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, didEndEditingRowAt indexPath: Foundation.IndexPath?)
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, targetIndexPathForMoveFromRowAt sourceIndexPath: Foundation.IndexPath, toProposedIndexPath proposedDestinationIndexPath: Foundation.IndexPath) -> Foundation.IndexPath
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, indentationLevelForRowAt indexPath: Foundation.IndexPath) -> Swift.Int
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, shouldShowMenuForRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, canPerformAction action: ObjectiveC.Selector, forRowAt indexPath: Foundation.IndexPath, withSender sender: Any?) -> Swift.Bool
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, performAction action: ObjectiveC.Selector, forRowAt indexPath: Foundation.IndexPath, withSender sender: Any?)
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, canFocusRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, shouldUpdateFocusIn context: UIKit.UITableViewFocusUpdateContext) -> Swift.Bool
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, didUpdateFocusIn context: UIKit.UITableViewFocusUpdateContext, with coordinator: UIKit.UIFocusAnimationCoordinator)
  @objc optional func speakolTndexPathForPreferredFocusedView(in tableView: UIKit.UITableView) -> Foundation.IndexPath?
  @available(iOS 11.0, *)
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, shouldSpringLoadRowAt indexPath: Foundation.IndexPath, with context: UIKit.UISpringLoadedInteractionContext) -> Swift.Bool
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, shouldBeginMultipleSelectionInteractionAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, didBeginMultipleSelectionInteractionAt indexPath: Foundation.IndexPath)
  @objc optional func speakolTableViewDidEndMultipleSelectionInteraction(_ tableView: UIKit.UITableView)
  @available(iOS 13.0, *)
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, contextMenuConfigurationForRowAt indexPath: Foundation.IndexPath, point: CoreGraphics.CGPoint) -> UIKit.UIContextMenuConfiguration?
  @available(iOS 13.0, *)
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, previewForHighlightingContextMenuWithConfiguration configuration: UIKit.UIContextMenuConfiguration) -> UIKit.UITargetedPreview?
  @available(iOS 13.0, *)
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, previewForDismissingContextMenuWithConfiguration configuration: UIKit.UIContextMenuConfiguration) -> UIKit.UITargetedPreview?
  @available(iOS 13.0, *)
  @objc optional func speakolTableView(_ tableView: UIKit.UITableView, willPerformPreviewActionForMenuWith configuration: UIKit.UIContextMenuConfiguration, animator: UIKit.UIContextMenuInteractionCommitAnimating)
}
public enum MethodType : Swift.String {
  case post
  case get
  case put
  case delete
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public class SpeakolVideoView {
  @objc deinit
}
